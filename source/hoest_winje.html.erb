<%= partial "description_inverse" %>
<section class="speakers" id="session">
    <div class="row">
      <div class="text-center">
        <h3>INFINITE LAMBDA CALCULUS</h3>
      </div>
      <p class="spaced">
        <p>
        Last year, on flatMap(Oslo): Jonas and Einar found that they could write
        safe programs if they employed big lambdas (types) to watch over the
        small lambdas (expressions), in a typed lambda calculus. That way, the
        small lambdas wouldn't form terms that would run off to compute forever.
        </p>
        <p>
        This year, on flatMap(Oslo): Jonas and Einar return to investigate the
        nature of such renegade terms. Are they any good? Can we do something
        useful with them? And, more importantly, can we do something useless?
        Join Jonas and Einar as they boldly go where types say no!
        </p>
      </p>
      <div class="text-center">
        <a name="hoest"></a>
        <p><img src="images/hoest.png" height="180" width="180"/></p>
        <h3>EINAR W. HØST</h3>
        <p><a href="https://twitter.com/einarwh">@einarwh</a></p>
      </div>
      <p class="spaced">
        Einar W. Høst is an unapologetic ivory tower zealot who programs
        computers at NRK. His heretic views include thinking before programming
        and making drawings to understand things better. This arrogant mindset
        no doubt stems from years of doing nothing of value while obtaining a
        PhD in Computer Science from the University of Oslo.
      </p>
      <div class="text-center">
        <a name="winje"></a>
        <p><img src="images/winje.png" height="180" width="180"/></p>
        <h3>JONAS WINJE</h3>
        <p><a href="https://twitter.com/JonasWinje">@JonasWinje</a></p>
      </div>
      <p class="spaced">
        Jonas is a construKction worker at Computas and a subclass of Animal.
        He's got an MSc in Computer Science from the University of Oslo andalso
        really likes programming languages and dogs. Passionate about Enterprise
        Software Engineering. Dog is more like an interface or a trait than like
        a class; you can have like a bunny and like that can be your dog if you
        want.
      </p>
  </div>
</section>
<%= partial "sponsors" %>
<%= partial "about" %>
