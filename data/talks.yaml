talks:
  -
    page_name:
      "spiewak"
    title:
      "Roll your own Shapeless"
    abstract:
      "Shapeless is a remarkable framework. It gives us the power to represent
      astonishingly rich constraints and generalize code over very broad
      structural classes, but it isn't magic! The tools with which shapeless is
      crafted are present in your version of scalac just as much as they are in
      Miles Sabin's, and learning to take advantage of them unlocks a rich
      palette of expression otherwise untapped in the language. In this talk,
      we will recreate some of the major elements of shapeless, learning how to
      harness a fully armed and operational type system, all while avoiding any
      hint of macro programming! Particular focus will be given to understanding
      the general patterns and ideas involved, and not just the end result."
    speakers:
      -
        name:
          "DANIEL SPIEWAK"
        bio:
          "Daniel Spiewak is a software developer based out of Boulder, CO. Over the
          years, he has worked with Java, Scala, Ruby, C/C++, ML, Clojure and
          several experimental languages. He currently spends most of his free time
          researching parser theory and methodologies, particularly areas where the
          field intersects with functional language design, domain-specific
          languages and type theory."
        image:
          "spiewak.png"
        twitter_handle:
          "@djspiewak"
        twitter_link:
          "https://twitter.com/djspiewak"

  -
    page_name:
      "torreborre"
    title:
      "The Eff monad, one monad to rule them all"
    abstract:
      "<p>
      Monad transformers are a neat way to compose effectul computations:
      pass some configuration, read/write from disk, track errors...
      However they can be a bit cumbersome to deal with, especially if you
      want to use different stacks sharing some common effects:
      for example a stack to interact with AWS and another one for Hadoop
      computations.
      </p>

      <p>
      This talk will shortly introduce monad transformers in Scala and their
      drawbacks then present the Eff monad.
      </p>
      <p>
      The Eff monad has some really interesting properties:

      <ul>
        <li>
          effects can be developed completely independently from each other
        </li>
        <li>
          effects can be interpreted in different ways and the interpreters
          can be composed together
        </li>
        <li>
          it is based on an efficient \"Free monad\"
          (avoiding the issue of quadratic flatMaps)
        </li>
        <li>
          with the Eff monad you will never have to re-implement the Monad
          operations (point / flatMap) again!
        </li>
      </ul>
      </p>"
    speakers:
      -
        name:
          "ERIC TORREBORRE"
        bio:
          "<p>
          Eric Torreborre is a software developer living in Berlin, working for
          Zalando.
          He is the creator of the specs2 library for software specifications in
          Scala.
          </p>
          <p>
          Scala has been his gateway drug to functional programming and made him
          a more satisfied developer.
          When he finally understands what he is doing he tries to share it with
          the rest of the world.
          </p>"
        image:
          "torreborre.png"
        twitter_handle:
          "@etorreborre"
        twitter_link:
          "https://twitter.com/etorreborre"

  -
    page_name:
      "hoest_winje"
    title:
      "Infinite lambda calculus"
    abstract:
      "<p>
      Last year, on flatMap(Oslo): Jonas and Einar found that they could write
      safe programs if they employed big lambdas (types) to watch over the
      small lambdas (expressions), in a typed lambda calculus. That way, the
      small lambdas wouldn't form terms that would run off to compute forever.
      </p>
      <p>
      This year, on flatMap(Oslo): Jonas and Einar return to investigate the
      nature of such renegade terms. Are they any good? Can we do something
      useful with them? And, more importantly, can we do something useless?
      Join Jonas and Einar as they boldly go where types say no!
      </p>"
    speakers:
      -
        name:
          "EINAR W. HØST"
        bio:
          "Einar W. Høst is an unapologetic ivory tower zealot who programs
          computers at NRK. His heretic views include thinking before programming
          and making drawings to understand things better. This arrogant mindset
          no doubt stems from years of doing nothing of value while obtaining a
          PhD in Computer Science from the University of Oslo."
        image:
          "hoest.png"
        twitter_handle:
          "@einarwh"
        twitter_link:
          "https://twitter.com/einarwh"
      -
        name:
          "JONAS WINJE"
        bio:
          "Jonas is a construKction worker at Computas and a subclass of Animal.
          He's got an MSc in Computer Science from the University of Oslo andalso
          really likes programming languages and dogs. Passionate about Enterprise
          Software Engineering. Dog is more like an interface or a trait than like
          a class; you can have like a bunny and like that can be your dog if you
          want."
        image:
          "winje.png"
        twitter_handle:
          "@JonasWinje"
        twitter_link:
          "https://twitter.com/JonasWinje"

  -
    page_name:
      "hupel"
    title:
      "How to test proper{t,l}y"
    abstract:
      "<p>
      Writing unit tests is pretty much established practice and in addition
      to that, property testing has caught up on popularity. Most functional
      languages have one, sometimes even many implementations. But \"property
      testing\" has a lot of aspects: randomized or exhaustive, minimization
      and generalization of counter examples, custom generators and filters,
      to name a few. Very often, property tests don't exploit all the features
      of the framework.
      </p>
      <p>
      In this talk, I'll give an overview of the state of the art of property
      testing in $X and show some common use cases, techniques and pitfalls.
      </p>"
    speakers:
      -
        name:
          "LARS HUPEL"
        bio:
          "Lars is a PhD student in Munich, Germany, working in the area of theorem
            proving. He has been using Scala for quite a while now, and is known as
            one of the founders of the typelevel initiative which is dedicated to
            providing principled, type-driven Scala libraries. He also talks about
            Haskell and Isabelle a lot."
        image:
          "hupel.png"
        twitter_handle:
          "@larsr_h"
        twitter_link:
          "https://twitter.com/larsr_h"

  -
    page_name:
      "pajer"
    speakers:
      -
        name:
          "ALISSA PAJER"
        bio:
          "Alissa Pajer began her functional programming career as a Scala
          engineer at Precog, and now she works in Scala at RichRelevance.
          Before her coding days, she studied pure mathematics. She currently
          lives in Munich, Germany, where she spends her non-computer time
          hiking, running, swimming, and cycling."
        image:
          "pajer.png"
        twitter_handle:
          "@alissapajer"
        twitter_link:
          "https://twitter.com/alissapajer"
    title:
      "Products, limits, and more!"
    abstract:
      "<p>Product types and coproduct types are ubiquitous in functional
      programming. In fact, it would be pretty challenging to program without
      them! In this talk, we will consider examples of products and coproducts
      and then discuss how we can view them as category theory constructs.
      </p>
      <p>
      We will then generalize our understanding of these types, defining them
      abstractly in terms of the limit and colimit.
      </p>
      <p>
      From there, we will explore other examples of limits in functional
      programming to see what surprises they uncover.
      </p>"


  -
    page_name:
      "petrashko"
    speakers:
      -
        name:
          "DMITRY PETRASHKO"
        bio:
          "Dmitry has been working on Scala since 2013, when he joined Martin
          Odersky's research lab at EPFL, working on ScalaBlitz, macro-generated
          collections for Scala. Since 2015 he has been working on the Dotty
          Compiler. He designed Mini-Phases, ported the JVM backend, implemented
          support for Java 8 lambdas and default methods, along withvarious
          other parts of the compiler, including the pattern matcher, lazy vals,
          tail recursion transformations and parts of erasure and mixin
          composition. He currently works on implementing the Dotty Linker, an
          optimizing compiler based on Dotty."
        image:
          "petrashko.png"
        twitter_handle:
          "@darkdimius"
        twitter_link:
          "https://twitter.com/darkdimius"
    title:
      "AutoSpecialization in Dotty"
    abstract:
      "<p>Seven years ago, specialization arrived in Scala, offering a way to
      improve the performance of methods called with primitive values, thanks
      to Iulian Dragos. We have learned a lot since then, so it's time to
      revisit the topic.</p>

      <p>The Dotty Linker analyses your program and its dependencies to apply a
      new specialization scheme. It builds on our experience from
      Specialization, Miniboxing and the Valhalla Project, and can drastically
      reduce the size of the emitted bytecode. And, best of all, it's always on,
      happens behind the scenes without annotations, and can produce speedups
      in excess of 20x. Additionally, it \"just works\" on Scala
      collections.</p>"


  -
    page_name:
      "sabin"
    speakers:
      -
        name:
          "MILES SABIN"
        bio:
          "Miles has been doing stuff with Scala for more than ten years,
          currently with Underscore Consulting. He is a cofounder of Typelevel
          and his best known project, the Scala generic programming library
          shapeless, is the weapon of choice wherever boilerplate needs to be
          scrapped or arities abstracted over."
        image:
          "sabin.png"
        twitter_handle:
          "@milessabin"
        twitter_link:
          "https://twitter.com/milessabin"
    title:
      "Fighting SI-2712 with dependent types and type level continuation passing"
    abstract:
      "<p>While working on the Kittens project, which uses shapeless to derive
      Cats type class instances for Scala algebraic data types, I repeatedly
      found myself running straight into the brick wall of the infamous
      Scala compiler bug that's listed in the Scala issue tracker as
      SI-2712. Game over? No, Challenge Accepted!</p>

      <p>In this talk I'll explain what SI-2712 is and why it's a problem,
      especially in libraries like Cats which make extensive use of type
      classes, like Functor, which are indexed by higher kinded types. I'll
      explain some of the techniques that can be used to work around it,
      both old, like Unapply, and new, such as the continuation passing
      style inspired approach I took in shapeless to support Kittens. I'll
      also talk about the prospect of trying to fix SI-2712 in Typelevel
      Scala rather than just working around it.</p>"


  -
    page_name:
      "rundberget"
    speakers:
      -
        name:
          "MAGNUS RUNDBERGET"
        bio:
          "<p>Magnus Rundberget is a consultant and programmer working for
          Kodemaker. He's spent most of his working years on the JVM platform
          developing web applications. The last couple of years he's become
          increasingly interested in functional programming and languages. His
          introduction to functional programming came when he started hacking
          Light Table plugins using ClojureScript. More recently he's worked on
          projects using Clojure/ClojureScript. When he eventually discovered
          Elm he finally found an approachable entry to statically typed
          functional programming. Just for kicks he authored an Elm plugin for
          Light Table (https://github.com/rundis/elm-light)</p>

          <p>Magnus spends most of his spare time helping out maintaining Light
          Table, learning about functional programming and blogging
          (http://rundis.github.io/blog/index.html) about things he makes or
          learns along the way.</p>"
        image:
          "rundberget.png"
        twitter_handle:
          "@mrundberget"
        twitter_link:
          "https://twitter.com/mrundberget"
    title:
      "Functional Reactive Programming for the Web using Elm"
    abstract:
      "<p>Elm is a beautiful statically typed functional language, carefully
      engineered to make it easy and fun to write great apps for the browser.
      Elm has no runtime exceptions, probably the most helpful compiler you've
      ever seen and it's really fast. Elm is so much more than just another
      language that transpiles to JavaScript. Elm is a plaform that tries
      really hard to guide you in how you should write your applications.
      Elm also comes with some key constraints. There is no opt out on
      immutability, you won't find any mutable global state and interop with
      JavaScript for client apps is controlled.</p>

      <p>In this talk you will get an overview of how Elm embraces (Functional)
      Reactive Programming using Signals. You will learn about the Elm platform
      and the core concepts that underpins the Elm Architecture. The brunt of
      the talk will be spent on a practical example where we will build a tiny
      web app from scratch.We will wrap up with a short summary on what I think
      is great about Elm, what the constraints of Elm might mean for you and
      what needs to improve before Elm can become mainstream.</p>"


  -
    page_name:
      "mcadams"
    speakers:
      -
        name:
          "BRENDAN MCADAMS"
        bio:
          "<p>Brendan McAdams works as a Senior Consultant & Trainer for
          BoldRadius Solutions, helping customers through consulting and
          training on the Typesafe Reactive Platform. In the past, Brendan has
          worked at Netflix building APIs, worked on a series of financial
          trading platforms, served as a Consultant & Trainer at Typesafe, and
          was an was an early employee of MongoDB.</p>

          <p>While at MongoDB, he created
          the integration drivers between MongoDB and Scala, as well as MongoDB
          and Hadoop. Brendan was also an early contributor to the Akka
          project, with one of the earliest Akka production deployments under
          his belt.</p>"
        image:
          "mcadams.png"
        twitter_handle:
          "@rit"
        twitter_link:
          "https://twitter.com/rit"
    title:
      "Macros for Mortals"
    abstract:
      "<p>Since their introduction in 2.10, Macros have veritably taken Scala by
      storm. They pop up everywhere, often providing elegant syntax extensions
      for Scala libraries – note the prevalence of “sql” string interpolation
      macros, for example.</p>

      <p>Many developers, however, are scared and confused by Macros – rightly
      so. Many examples of Macros require deep knowledge of the Scala AST,
      internals and oddities. But hope exists: newer features like quasiquotes
      make it ridiculously easy to write powerful Macros with code templating.
      </p>

      <p>In this talk, we’ll demystify just how Macros work and are constructed,
      walking through many of the different “types” of Macros that Scala
      supports. A final focus will be given to the use of the newer Quasiquotes
      and Annotations features as a way of quickly constructing powerful new
      code features in your own Scala code.</p>"


  -
    page_name:
      "vatn"
    speakers:
      -
        name:
          "TORBJØRN VATN"
        bio:
          "<p>Torbjørn Vatn is currently a Senior Platform Engineer at the
          Norwegian startup Unacast where he programs Scala, Devs'n'Ops and
          brews a lot of coffee. He has 4-5 years experience as a full-time
          Scala developer working for both penger.no and BEKK Consulting.</p>"
        image:
          "vatn.png"
        twitter_handle:
          "@torbjornvatn"
        twitter_link:
          "https://twitter.com/torbjornvatn"
    title:
      "Go with the Dataflow!"
    abstract:
      "<p>A field report on how running a Scala app on Google Container Engine,
      interfacing with several of Google Cloud's native services, has worked
      out for the engineers at the Norwegian startup Unacast.</p>

      <p>We will discuss how we use Pub/Sub, BigQuery and Dataflow from Google
      Cloud's BigData feature set, and why we have chosen to use these services
      instead of setting up our own Kafka and Spark clusters.</p>

      <p>Then we'll have a look at how we package, deploy and run our app as a
      pod in Kubernetes hosted on Google Container Engine using fancy ChatOps
      tricks. This part will also include a short overview of some of the
      logging and monitoring techniques we have applied, including
      Dropwizard Metrics + Datadog, Google Cloud Logging and Slack.</p>

      <p>Last but not least I'll go into some detail of how it has been to use
      the Dataflow Java SDK from Scala, talking about how to define the
      Dataflow pipeline in somewhat functionally and what kind of
      customizations I had to do to make the experience more Scalaesque.</p>"


  -
    page_name:
      "ford"
    speakers:
      -
        name:
          "CHRIS FORD"
        bio:
          "<p>Chris is a certified BABE
          (Bachelor of Arts, Bachelor of Engineering), and consequentially an
          idiophile and technophobe. He began to make music with code partly to
          compensate for his poor technique, and partly because air piano is
          unsatisfying. When he works, he works for ThoughtWorks, though that 
          isn't all the time.</p>"
        image:
          "ford.png"
        twitter_handle:
          "@ctford"
        twitter_link:
          "https://twitter.com/ctford"
    title:
      "Klangmeister"
    abstract:
      "<p>Live music coding, like other forms of programming, can require a lot
      of setup to get started. That’s a shame – many newcomers lose their
      enthusiasm as they battle editor configuration and hardware quirks.</p>

      <p>Klangmeister attacks this problem by hosting a live coding environment
      in the most ubiquitous programming environment in the world. Users are
      invited to design synthesisers and compose melodies with Clojurescript –
      without leaving the comfort of their browser.</p>

      <p>In this talk, I'll explain what Klangmeister does, how it does it,
      and why.</p>"


  -
    page_name:
     "abrahamsen"
    speakers:
     -
       name:
         "IVAR ABRAHAMSEN"
       bio:
         "<p>Ivar Abrahamsen is a London based consultant at Eray by Flurdy Ltd
         (eray.uk). He is an experienced developer and architect from a mix of
         large consultancies, telecom, finance, public sector and flashy
         startups. Opinionated, mostly wrong and hopefully still learning. He
         rants at @flurdy and writes whilst learning at flurdy.com.</p>"
       image:
         "abrahamsen.png"
       twitter_handle:
         "@flurdy"
       twitter_link:
         "https://twitter.com/flurdy"
    title:
     "Scaling Scala"
    abstract:
     "<p>Not performance but scaling people.</p>

     <p>What are the conventions and ideas to consider for your Scala projects
     when your project/department/company receives a lot of funding to scale the
     head count massively? What are the best practices, competing ideas,
     potential pitfalls, shared battle wounds, experiences?</p>

     <p>With references from a games studio that quadrupled to 200 employees in
     a year, and a public sector department that grew from a few teams to 30+
     teams and over 200 Scala developers.</p>

     <p>How does a wide range of experience and skill level affect conventions
     for coding style, functional approach and frameworks used. And related
     issues with outsourced scaling.</p>

     <p>Essential practicalities such keeping libraries, frameworks, Scala
     versions up to date across 10s and 100s of projects, using sbt-bobby and
     alternatives. How to prevent bottlenecks between dependant teams and
     projects, and continuous local integration with other teams' microservices
     snapshots. Using tools such as github.com/HMRC/service-manager. Touch on
     how automated scripted versioned tooling for everything with easy
     management reduces friction.</p>

     <p>A lot of conventions (some quite firm) but no rules. In the end scaling
     Scala can be done and done well.</p>"
