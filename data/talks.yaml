talks:
  -
    page_name:
      "spiewak"
    title:
      "Roll your own Shapeless"
    type:
      "Presentation"
    abstract:
      "Shapeless is a remarkable framework. It gives us the power to represent
      astonishingly rich constraints and generalize code over very broad
      structural classes, but it isn't magic! The tools with which shapeless is
      crafted are present in your version of scalac just as much as they are in
      Miles Sabin's, and learning to take advantage of them unlocks a rich
      palette of expression otherwise untapped in the language. In this talk,
      we will recreate some of the major elements of shapeless, learning how to
      harness a fully armed and operational type system, all while avoiding any
      hint of macro programming! Particular focus will be given to understanding
      the general patterns and ideas involved, and not just the end result."
    speakers:
      -
        name:
          "DANIEL SPIEWAK"
        bio:
          "Daniel Spiewak is a software developer based out of Boulder, CO. Over the
          years, he has worked with Java, Scala, Ruby, C/C++, ML, Clojure and
          several experimental languages. He currently spends most of his free time
          researching parser theory and methodologies, particularly areas where the
          field intersects with functional language design, domain-specific
          languages and type theory."
        image:
          "spiewak.png"
        twitter_handle:
          "@djspiewak"
        twitter_link:
          "https://twitter.com/djspiewak"

  -
    page_name:
      "torreborre"
    title:
      "The Eff monad, one monad to rule them all"
    type:
      "Presentation"
    abstract:
      "<p>
      Monad transformers are a neat way to compose effectul computations:
      pass some configuration, read/write from disk, track errors...
      However they can be a bit cumbersome to deal with, especially if you
      want to use different stacks sharing some common effects:
      for example a stack to interact with AWS and another one for Hadoop
      computations.
      </p>

      <p>
      This talk will shortly introduce monad transformers in Scala and their
      drawbacks then present the Eff monad.
      </p>
      <p>
      The Eff monad has some really interesting properties:

      <ul>
        <li>
          effects can be developed completely independently from each other
        </li>
        <li>
          effects can be interpreted in different ways and the interpreters
          can be composed together
        </li>
        <li>
          it is based on an efficient \"Free monad\"
          (avoiding the issue of quadratic flatMaps)
        </li>
        <li>
          with the Eff monad you will never have to re-implement the Monad
          operations (point / flatMap) again!
        </li>
      </ul>
      </p>"
    speakers:
      -
        name:
          "ERIC TORREBORRE"
        bio:
          "<p>
          Eric Torreborre is a software developer living in Berlin, working for
          Zalando.
          He is the creator of the specs2 library for software specifications in
          Scala.
          </p>
          <p>
          Scala has been his gateway drug to functional programming and made him
          a more satisfied developer.
          When he finally understands what he is doing he tries to share it with
          the rest of the world.
          </p>"
        image:
          "torreborre.png"
        twitter_handle:
          "@etorreborre"
        twitter_link:
          "https://twitter.com/etorreborre"

  -
    page_name:
      "hoest_winje"
    title:
      "Infinite lambda calculus"
    type:
      "Presentation"
    abstract:
      "<p>
      Last year, on flatMap(Oslo): Jonas and Einar found that they could write
      safe programs if they employed big lambdas (types) to watch over the
      small lambdas (expressions), in a typed lambda calculus. That way, the
      small lambdas wouldn't form terms that would run off to compute forever.
      </p>
      <p>
      This year, on flatMap(Oslo): Jonas and Einar return to investigate the
      nature of such renegade terms. Are they any good? Can we do something
      useful with them? And, more importantly, can we do something useless?
      Join Jonas and Einar as they boldly go where types say no!
      </p>"
    speakers:
      -
        name:
          "EINAR W. HØST"
        bio:
          "Einar W. Høst is an unapologetic ivory tower zealot who programs
          computers at NRK. His heretic views include thinking before programming
          and making drawings to understand things better. This arrogant mindset
          no doubt stems from years of doing nothing of value while obtaining a
          PhD in Computer Science from the University of Oslo."
        image:
          "hoest.png"
        twitter_handle:
          "@einarwh"
        twitter_link:
          "https://twitter.com/einarwh"
      -
        name:
          "JONAS WINJE"
        bio:
          "Jonas is a construKction worker at Computas and a subclass of Animal.
          He's got an MSc in Computer Science from the University of Oslo andalso
          really likes programming languages and dogs. Passionate about Enterprise
          Software Engineering. Dog is more like an interface or a trait than like
          a class; you can have like a bunny and like that can be your dog if you
          want."
        image:
          "winje.png"
        twitter_handle:
          "@JonasWinje"
        twitter_link:
          "https://twitter.com/JonasWinje"

  -
    page_name:
      "hupel"
    title:
      "How to test proper{t,l}y"
    type:
      "Presentation"
    abstract:
      "<p>
      Writing unit tests is pretty much established practice and in addition
      to that, property testing has caught up on popularity. Most functional
      languages have one, sometimes even many implementations. But \"property
      testing\" has a lot of aspects: randomized or exhaustive, minimization
      and generalization of counter examples, custom generators and filters,
      to name a few. Very often, property tests don't exploit all the features
      of the framework.
      </p>
      <p>
      In this talk, I'll give an overview of the state of the art of property
      testing in $X and show some common use cases, techniques and pitfalls.
      </p>"
    speakers:
      -
        name:
          "LARS HUPEL"
        bio:
          "Lars is a PhD student in Munich, Germany, working in the area of theorem
            proving. He has been using Scala for quite a while now, and is known as
            one of the founders of the typelevel initiative which is dedicated to
            providing principled, type-driven Scala libraries. He also talks about
            Haskell and Isabelle a lot."
        image:
          "hupel.png"
        twitter_handle:
          "@larsr_h"
        twitter_link:
          "https://twitter.com/larsr_h"

  -
    page_name:
      "pajer"
    speakers:
      -
        name:
          "ALISSA PAJER"
        bio:
          "Alissa Pajer began her functional programming career as a Scala
          engineer at Precog, and now she works in Scala at SlamData.
          Before her coding days, she studied pure mathematics. She currently
          lives in Munich, Germany, where she spends her non-computer time
          hiking, running, swimming, and cycling."
        image:
          "pajer.png"
        twitter_handle:
          "@alissapajer"
        twitter_link:
          "https://twitter.com/alissapajer"
    title:
      "Products, limits, and more!"
    type:
      "Presentation"
    abstract:
      "<p>Product types and coproduct types are ubiquitous in functional
      programming. In fact, it would be pretty challenging to program without
      them! In this talk, we will consider examples of products and coproducts
      and then discuss how we can view them as category theory constructs.
      </p>
      <p>
      We will then generalize our understanding of these types, defining them
      abstractly in terms of the limit and colimit.
      </p>
      <p>
      From there, we will explore other examples of limits in functional
      programming to see what surprises they uncover.
      </p>"


  -
    page_name:
      "petrashko"
    speakers:
      -
        name:
          "DMITRY PETRASHKO"
        bio:
          "Dmitry has been working on Scala since 2013, when he joined Martin
          Odersky's research lab at EPFL, working on ScalaBlitz, macro-generated
          collections for Scala. Since 2015 he has been working on the Dotty
          Compiler. He designed Mini-Phases, ported the JVM backend, implemented
          support for Java 8 lambdas and default methods, along withvarious
          other parts of the compiler, including the pattern matcher, lazy vals,
          tail recursion transformations and parts of erasure and mixin
          composition. He currently works on implementing the Dotty Linker, an
          optimizing compiler based on Dotty."
        image:
          "petrashko.png"
        twitter_handle:
          "@darkdimius"
        twitter_link:
          "https://twitter.com/darkdimius"
    title:
      "AutoSpecialization in Dotty"
    type:
      "Presentation"
    abstract:
      "<p>Seven years ago, specialization arrived in Scala, offering a way to
      improve the performance of methods called with primitive values, thanks
      to Iulian Dragos. We have learned a lot since then, so it's time to
      revisit the topic.</p>

      <p>The Dotty Linker analyses your program and its dependencies to apply a
      new specialization scheme. It builds on our experience from
      Specialization, Miniboxing and the Valhalla Project, and can drastically
      reduce the size of the emitted bytecode. And, best of all, it's always on,
      happens behind the scenes without annotations, and can produce speedups
      in excess of 20x. Additionally, it \"just works\" on Scala
      collections.</p>"


  -
    page_name:
      "sabin"
    speakers:
      -
        name:
          "MILES SABIN"
        bio:
          "Miles has been doing stuff with Scala for more than ten years,
          currently with Underscore Consulting. He is a cofounder of Typelevel
          and his best known project, the Scala generic programming library
          shapeless, is the weapon of choice wherever boilerplate needs to be
          scrapped or arities abstracted over."
        image:
          "sabin.png"
        twitter_handle:
          "@milessabin"
        twitter_link:
          "https://twitter.com/milessabin"
    title:
      "Fighting SI-2712 with dependent types and type level continuation passing"
    type:
      "Presentation"
    abstract:
      "<p>While working on the Kittens project, which uses shapeless to derive
      Cats type class instances for Scala algebraic data types, I repeatedly
      found myself running straight into the brick wall of the infamous
      Scala compiler bug that's listed in the Scala issue tracker as
      SI-2712. Game over? No, Challenge Accepted!</p>

      <p>In this talk I'll explain what SI-2712 is and why it's a problem,
      especially in libraries like Cats which make extensive use of type
      classes, like Functor, which are indexed by higher kinded types. I'll
      explain some of the techniques that can be used to work around it,
      both old, like Unapply, and new, such as the continuation passing
      style inspired approach I took in shapeless to support Kittens. I'll
      also talk about the prospect of trying to fix SI-2712 in Typelevel
      Scala rather than just working around it.</p>"


  -
    page_name:
      "rundberget"
    speakers:
      -
        name:
          "MAGNUS RUNDBERGET"
        bio:
          "<p>Magnus Rundberget is a consultant and programmer working for
          Kodemaker. He's spent most of his working years on the JVM platform
          developing web applications. The last couple of years he's become
          increasingly interested in functional programming and languages. His
          introduction to functional programming came when he started hacking
          Light Table plugins using ClojureScript. More recently he's worked on
          projects using Clojure/ClojureScript. When he eventually discovered
          Elm he finally found an approachable entry to statically typed
          functional programming. Just for kicks he authored an Elm plugin for
          Light Table (https://github.com/rundis/elm-light)</p>

          <p>Magnus spends most of his spare time helping out maintaining Light
          Table, learning about functional programming and blogging
          (http://rundis.github.io/blog/index.html) about things he makes or
          learns along the way.</p>"
        image:
          "rundberget.png"
        twitter_handle:
          "@mrundberget"
        twitter_link:
          "https://twitter.com/mrundberget"
    title:
      "Functional Reactive Programming for the Web using Elm"
    type:
      "Presentation"
    abstract:
      "<p>Elm is a beautiful statically typed functional language, carefully
      engineered to make it easy and fun to write great apps for the browser.
      Elm has no runtime exceptions, probably the most helpful compiler you've
      ever seen and it's really fast. Elm is so much more than just another
      language that transpiles to JavaScript. Elm is a plaform that tries
      really hard to guide you in how you should write your applications.
      Elm also comes with some key constraints. There is no opt out on
      immutability, you won't find any mutable global state and interop with
      JavaScript for client apps is controlled.</p>

      <p>In this talk you will get an overview of how Elm embraces (Functional)
      Reactive Programming using Signals. You will learn about the Elm platform
      and the core concepts that underpins the Elm Architecture. The brunt of
      the talk will be spent on a practical example where we will build a tiny
      web app from scratch.We will wrap up with a short summary on what I think
      is great about Elm, what the constraints of Elm might mean for you and
      what needs to improve before Elm can become mainstream.</p>"


  -
    page_name:
      "mcadams"
    speakers:
      -
        name:
          "BRENDAN MCADAMS"
        bio:
          "<p>Brendan McAdams works as a Senior Consultant & Trainer for
          Lightbend (formerly Typesafe), helping support and enable customers
          with the Reactive Platform (Scala, Akka, Play, Spark, and Lagom). In
          the past, Brendan has worked at Netflix building APIs, worked on a
          series of financial trading platforms, and was an early employee of
          MongoDB.</p>

          <p>While at MongoDB, he created the integration drivers between
          MongoDB and Scala, as well as MongoDB and Hadoop. Brendan was also an
          early contributor to the Akka project, with one of the earliest Akka
          production deployments under his belt.</p>"
        image:
          "mcadams.png"
        twitter_handle:
          "@rit"
        twitter_link:
          "https://twitter.com/rit"
    title:
      "Macros for Mortals"
    type:
      "Presentation"
    abstract:
      "<p>Since their introduction in 2.10, Macros have veritably taken Scala by
      storm. They pop up everywhere, often providing elegant syntax extensions
      for Scala libraries – note the prevalence of “sql” string interpolation
      macros, for example.</p>

      <p>Many developers, however, are scared and confused by Macros – rightly
      so. Many examples of Macros require deep knowledge of the Scala AST,
      internals and oddities. But hope exists: newer features like quasiquotes
      make it ridiculously easy to write powerful Macros with code templating.
      </p>

      <p>In this talk, we’ll demystify just how Macros work and are constructed,
      walking through many of the different “types” of Macros that Scala
      supports. A final focus will be given to the use of the newer Quasiquotes
      and Annotations features as a way of quickly constructing powerful new
      code features in your own Scala code.</p>"

  -
    page_name:
      "berg"
    speakers:
      -
        name:
          "ØYVIND RADDUM BERG"
        bio:
          "Øyvind is a consultant and developer from Oslo, working for Arktekk."
        image:
          "berg.png"
        twitter_handle:
          "@olvindberg"
        twitter_link:
          "https://twitter.com/olvindberg"
    title:
      "Scala.js - an introduction"
    type:
      "Workshop"
    abstract:
      "<p>Scala.js is a safer way to build robust web applications. We have a
      good programming language, a stable environment and a fantastic selection
      of cross-compiled libraries.</p>

      <p>After this workshop you will be ready to continue coding with Scala.js
      by yourself.</p>

      <p>We will start out by exploring a template sbt project so you can get a
      feel for how the build pipeline works. Participants will then get some
      intuition about what Scala.js can do and cannot do.</p>

      <p>Finally, we will see how we share source code between client and
      server, and how we can get awesome type-safe Ajax calls
      (courtesy of autowire) with automatic Json codec derivation (with uPickle)
      </p>

      <p>Knowledge of Scala is recommended. Frontend experience is beneficial but not at all necessary.
      </p>"

  -
    page_name:
      "vatn"
    speakers:
      -
        name:
          "TORBJØRN VATN"
        bio:
          "<p>Torbjørn Vatn is currently a Senior Platform Engineer at the
          Norwegian startup Unacast where he programs Scala, Devs'n'Ops and
          brews a lot of coffee. He has 4-5 years experience as a full-time
          Scala developer working for both penger.no and BEKK Consulting.</p>"
        image:
          "vatn.png"
        twitter_handle:
          "@torbjornvatn"
        twitter_link:
          "https://twitter.com/torbjornvatn"
    title:
      "Go with the Dataflow!"
    type:
      "Presentation"
    abstract:
      "<p>A field report on how running a Scala app on Google Container Engine,
      interfacing with several of Google Cloud's native services, has worked
      out for the engineers at the Norwegian startup Unacast.</p>

      <p>We will discuss how we use Pub/Sub, BigQuery and Dataflow from Google
      Cloud's BigData feature set, and why we have chosen to use these services
      instead of setting up our own Kafka and Spark clusters.</p>

      <p>Then we'll have a look at how we package, deploy and run our app as a
      pod in Kubernetes hosted on Google Container Engine using fancy ChatOps
      tricks. This part will also include a short overview of some of the
      logging and monitoring techniques we have applied, including
      Dropwizard Metrics + Datadog, Google Cloud Logging and Slack.</p>

      <p>Last but not least I'll go into some detail of how it has been to use
      the Dataflow Java SDK from Scala, talking about how to define the
      Dataflow pipeline in somewhat functionally and what kind of
      customizations I had to do to make the experience more Scalaesque.</p>"


  -
    page_name:
      "ford"
    speakers:
      -
        name:
          "CHRIS FORD"
        bio:
          "<p>Chris is a certified BABE
          (Bachelor of Arts, Bachelor of Engineering), and consequentially an
          idiophile and technophobe. He began to make music with code partly to
          compensate for his poor technique, and partly because air piano is
          unsatisfying. When he works, he works for ThoughtWorks, though that
          isn't all the time.</p>"
        image:
          "ford.png"
        twitter_handle:
          "@ctford"
        twitter_link:
          "https://twitter.com/ctford"
    title:
      "Klangmeister"
    type:
      "Presentation"
    abstract:
      "<p>Live music coding, like other forms of programming, can require a lot
      of setup to get started. That’s a shame – many newcomers lose their
      enthusiasm as they battle editor configuration and hardware quirks.</p>

      <p>Klangmeister attacks this problem by hosting a live coding environment
      in the most ubiquitous programming environment in the world. Users are
      invited to design synthesisers and compose melodies with Clojurescript –
      without leaving the comfort of their browser.</p>

      <p>In this talk, I'll explain what Klangmeister does, how it does it,
      and why.</p>"


  -
    page_name:
     "abrahamsen"
    speakers:
     -
       name:
         "IVAR ABRAHAMSEN"
       bio:
         "<p>Ivar Abrahamsen is a London based consultant at Eray by Flurdy Ltd
         (eray.uk). He is an experienced developer and architect from a mix of
         large consultancies, telecom, finance, public sector and flashy
         startups. Opinionated, mostly wrong and hopefully still learning. He
         rants at @flurdy and writes whilst learning at flurdy.com.</p>"
       image:
         "abrahamsen.png"
       twitter_handle:
         "@flurdy"
       twitter_link:
         "https://twitter.com/flurdy"
    title:
     "Scaling Scala"
    type:
      "Presentation"
    abstract:
     "<p>Not performance but scaling people.</p>

     <p>What are the conventions and ideas to consider for your Scala projects
     when your project/department/company receives a lot of funding to scale the
     head count massively? What are the best practices, competing ideas,
     potential pitfalls, shared battle wounds, experiences?</p>

     <p>With references from a games studio that quadrupled to 200 employees in
     a year, and a public sector department that grew from a few teams to 30+
     teams and over 200 Scala developers.</p>

     <p>How does a wide range of experience and skill level affect conventions
     for coding style, functional approach and frameworks used. And related
     issues with outsourced scaling.</p>

     <p>Essential practicalities such keeping libraries, frameworks, Scala
     versions up to date across 10s and 100s of projects, using sbt-bobby and
     alternatives. How to prevent bottlenecks between dependant teams and
     projects, and continuous local integration with other teams' microservices
     snapshots. Using tools such as github.com/HMRC/service-manager. Touch on
     how automated scripted versioned tooling for everything with easy
     management reduces friction.</p>

     <p>A lot of conventions (some quite firm) but no rules. In the end scaling
     Scala can be done and done well.</p>"

  -
    page_name:
      "pretty"
    speakers:
    -
      name:
        "JON PRETTY"
      bio:
        "<p>Jon (@propensive) has been having fun riding the bleeding edge of
        Scala for over a decade, and he's not done yet. While he's not
        travelling the world attending Scala conferences, or organizing his
        own (Scala World), Jon spends his time working on the open-source
        Rapture libraries. He is principal engineer at The Scala Center.</p>"
      image:
        "pretty.png"
      twitter_handle:
        "@propensive"
      twitter_link:
        "https://twitter.com/propensive"
    title:
      "Type Members vs Type Parameters"
    type:
      "Presentation"
    abstract:
      "<p>Scala's type system provides generics in two ways—type members and
      type parameters—and most advanced Scala developers will use both in their
      code at different times.</p>

      <p>But how do we choose between them? Usually one or the other will
      feel \"right\" for a particular use case, and, if not, we can usually
      refactor our code and take the alternative approach. But could we learn
      to be better at making the \"right\" choice first time?</p>

      <p>I'll explore the most important considerations when choosing between
      them, their relationship with existential and universal quantification
      (I'll also explain what this means!), and look at whether they are
      completely interchangeable in all cases, or whether certain scenarios
      force us to take one path or the other.</p>"

  -
    page_name:
      "hauck"
    speakers:
    -
      name:
        "MARKUS HAUCK"
      bio:
        "<p>Markus works at codecentric AG in Germany as an IT Consultant and
        Lightbend (formerly Typesafe) Scala Trainer. Currently he is using Scala
        for his day-to-day work and he is also active
        (when he finds the time) in open-source, e.g. cats, scalaz and friends.
        He is a big fan of functional programming!</p>"
      image:
        "hauck.png"
      twitter_handle:
        ""
      twitter_link:
        ""
    title:
      "Free monads and free applicatives"
    type:
      "Presentation"
    abstract:
      "<p>The talk is about free monads and free applicatives.
      More concretely, I will present a DSL that uses a combination of both to
      create a DSL that has the full monadic power, but still allows the user
      to embed parts written using the free applicative interface.
      Those parts (free applicative) can then be analyzed and optimized during
      the program execution.</p>

      <p>I plan to apply the idea to a case study thereby demonstrating how to
      combine free monads and free applicatives into a DSL which features some
      nice properties we can gain from embedding applicative parts,
      like static analyzability.</p>"

  -
    page_name:
      "nedelcu"
    speakers:
    -
      name:
        "ALEXANDRU NEDELCU"
      bio:
        "<p>Alexandru is a software developer living in Bucharest, Romania,
        currently working for Eloquentix. A startup guy, by day he's been
        helping with projects for powering the next generation energy grid
        solutions and for advancing the health-care industry.</p>

        <p>By night he's fueled by his work on the Monix project, the Scala
        library for composing asynchronous and event-based programs. He's also
        a proud father, husband, has a very unhealthy sleep schedule and
        appreciates talking about programming over beer.</p>

        <p>Sometimes he blogs at https://bionicspirit.com</p>"
      image:
        "nedelcu.png"
      twitter_handle:
        "@alexelcu"
      twitter_link:
        "https://twitter.com/alexelcu"
    title:
      "On dealing with asynchronicity with the Monix Task"
    type:
      "Presentation"
    abstract:
      "<p>Scala’s Future from the standard library is great, but sometimes we
      need more.</p>

      <p>A Future strives to be a value, one detached from time and for this
      reason its capabilities are restricted and for some use-cases its behavior
      ends up being unintuitive. Hence, while the Future/Promise pattern is
      great for representing asynchronous results of processes that may or may
      not be started yet, it cannot be used as a specification for an
      asynchronous computation.</p>

      <p>The Monix Task is in essence about dealing with asynchronous
      computations and non-determinism, being inspired by the Scalaz Task and
      designed from the ground up for performance and to be compatible with
      Scala.js/Javascript runtimes and with the Cats library. It also makes use
      of Scala’s Future to represent results, the two being complementary.</p>

      <p>In this talk I’ll show you its design, when you should use it and why
      in dealing with asynchronicity it’s better to work with Task instead of
      blocking threads.</p>"

  -
    page_name:
      "geirsson"
    speakers:
    -
      name:
        "ÓLAFUR PÁLL GEIRSSON"
      bio:
        "<p>Ólafur is a Master's student at Martin Odersky's lab at EPFL. He
        has written payroll management systems in Iceland, flirted with
        embedded DSLs in Scala and worked on developer productivity at Google.
        Ólafur blogs at geirsson.com.</p>

        <p>Rumour has it that Ólafur is looking for a job in Norway after he
        graduates this summer. Why Norway? Ask him.</p>"
      image:
        "geirsson.png"
      twitter_handle:
        "@olafurpg"
      twitter_link:
        "https://twitter.com/olafurpg"
    title:
      "Automatic, opinionated code formatting with scalafmt"
    type:
      "Presentation"
    abstract:
      "<p>Any style guide written in English is either so brief that it’s
      ambiguous, or so long that no one reads it. Scalafmt does its best to
      relieve your attention from such trivia and let you focus instead on
      writing correct, maintainable code. Mark the end of arguments about
      formatting!</p>

      <p>In this talk, we’ll see how scalafmt works and how it’s different from
      its sibling Scalariform. We will also dig into how Scalafmt is implemented
      with scala.meta, a new metaprogramming library that leverages both the
      functional and OO aspects of Scala. It turns out that scala.meta's
      syntactic API and scalafmt are a match made in heaven.</p>

      <p>Expect a lot of funky looking code. Don't forget to bring your
      strongest opinions on whitespace and indentation, it may be your last
      chance to express them.</p>"

  -
    page_name:
      "stepien"
    speakers:
    -
      name:
        "JAN STĘPIEŃ"
      bio:
        "<p>Jan is a software developer at stylefruits, where he's responsible
        for a network of micro- and macro-services. He runs (½-) marathons and
        enjoys wandering in snowy Alpine wilderness. When the weather is bad he
        plays Go instead. He’s easily confused by the assignment operator.</p>"
      image:
        "stepien.png"
      twitter_handle:
        "@janstepien"
      twitter_link:
        "https://twitter.com/janstepien"
    title:
      "Let's play Go in Clojure"
    type:
      "Workshop"
    abstract:
      "<p>You've played around with Clojure a bit. You've learned the basics and
      you enjoy the language a lot. Now you're wondering how to build your first
      non-trivial project. Let's do this together!</p>

      <p>In this workshop we'll build an HTTP backend system for playing the
      ancient game of Go. We'll learn how to structure a non-trivial project.
      We'll use best tools the Clojure ecosystem has to offer. We'll use the
      productive dev environment to the full. We'll also learn basics of Go
      (the board game, it is).</p>

      <p>The workshop is aimed at people who've experimented a bit with Clojure,
      know the basics of the language, and are now wondering how to structure a
      real-world project.</p>

      <p>💥 Important! 💥 Are you going to attend the workshop? Be sure to
      follow instructions in the README of
      <a href=\"https://github.com/jstepien/goback\">
      https://github.com/jstepien/goback</a>
      </p>"

  -
    page_name:
      "ustiuzhanina"
    speakers:
    -
      name:
        "KATE USTIUZHANINA"
      bio:
        "<p>Kate got Master's degree in Software Engineering from St Petersburg
        Academic University. She works on Scala Plugin at JetBrains.</p>"
      image:
        "ustiuzhanina.png"
      twitter_handle:
        ""
      twitter_link:
        ""
    title:
      "Who\'s writing the code: you or your IDE?"
    type:
      "Workshop"
    abstract:
      "<p>What if there was an IDE that could write code for you? That\'d be
      great for sure, but unfortunately, as smart as they are, modern IDE can\'t
      do that for you yet. Luckily, there\'s Scala Plugin, that, when used
      together with IntelliJ IDEA, can help you to be as productive as possible,
      and well, gets you quite close to that self coding dream IDE.</p>

      <p>How do I not waste energy on routine tasks and focus on the most
      important concepts of my Scala program? How can I save time and write
      less boilerplate code? We will answer both these and other questions in
      our talk. We will solve real world challenges quickly and efficiently
      using numerous features like live templates, while showing handy tips and
      tricks in action.</p>

      <p>Participants of this workshop will learn about useful
      refactorings, navigation, completion, and other features, as well as how
      to use them via handy keyboard shortcuts (which is guaranteed to put your
      mouse to rest.) Forget about routine coding with IntelliJ IDEA and Scala
      Plugin!</p>"

  -
    page_name:
      "hamberg"
    speakers:
    -
      name:
        "ERLEND HAMBERG"
      bio:
        "<p>Erlend Hamberg started a on computer engineering degree to learn
        about systems programming and hardware, but veered slightly off course
        and ended up with a degree in computer science with a specialization in
        artificial intelligence.</p>

        <p>He briefly returned to his former passion of low-level programming,
        working on GPU drivers, but was never able to let go of the power and
        elegance of functional programming and ended up climbing back up the
        abstraction ladder.</p>

        <p>When he is not in front of a computer you can find him in the
        Oslofjord, kayaking.</p>"
      image:
        "hamberg.png"
      twitter_handle:
        "@ehamberg"
      twitter_link:
        "https://twitter.com/ehamberg"
    title:
      "Stack: Painfree, Reproducable Building of Haskell Project"
    type:
      "Presentation"
    abstract:
      "<p>Stack is a new, modern cross-platform build tool for Haskell. It can
      not only build your project and its dependencies, but also manage the
      entire toolchain (including the GHC compiler). It is an alternative to
      cabal-install and has already allowed many developers to escape “cabal
      hell” even though it was announced less than a year ago.</p>

      <p>The most important design point of stack is that if you run
      “stack build” today, you should get the same result running “stack build”
      tomorrow. Hiding behind this guarantee is a curated source of Haskell
      package sets that are internally consistency and whose tests pass.</p>

      <p>We'll take a look at how Stack achieves its guarantees, but most of all
      we'll look at how it works in practice, how it allows projects to safely
      share pre-built dependencies, and how even scripts written in Haskell can
      be guaranteed to keep working in the future. We'll also look at how Stack
      integrates with Docker, allowing builds to happen in a container, meaning
      that all developers on a project can have a shared, consistent build
      environment.</p>"

  -
    page_name:
      "markham"
    speakers:
    -
      name:
        "NOEL MARKHAM"
      bio:
        "<p>Noel Markham lives in London, and started out as a Java developer
        in finance, before moving to functional programming in a wide range of
        industries, including games and social media startups, and one of the
        largest broadcasters in the UK. Before becoming a Scala developer, he
        wrote the book Java Programming Interviews Exposed, but more recently
        enjoys sharing his knowledge by speaking at conferences and attending
        meetups.</p>"
      image:
        "markham.png"
      twitter_handle:
        "@noelmarkham"
      twitter_link:
        "https://twitter.com/noelmarkham"
    title:
      "Being creative with genetic algorithms and typeclasses"
    type:
      "Presentation"
    abstract:
      "<p>Typeclasses are a hidden gem of the Scala language. They provide an
      immense power not seen in imperative languages, and so their approach
      might be unusual or alien to those approaching Scala from an imperative
      background. I will show how typeclasses allow developers to effectively
      attach their own interfaces to code written by others.</p>

      <p>In this talk I plan to describe what a genetic algorithm is, and
      provide an example implementation in Scala. Using this implementation,
      I will demonstrate how to define a specific typeclass for our problem. I
      will then derive several different implementations, showing how to get
      rock solid confidence in testing our algorithm - with the help of
      ScalaCheck - and then provide a completely different typeclass to provide
      a fun, visual and creative solution, illustrating the iterations and
      improvements as the genetic algorithm’s fitness function runs.</p>"
